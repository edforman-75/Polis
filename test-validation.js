const fs = require('fs');
const path = require('path');
const PressReleaseParser = require('./backend/utils/press-release-parser');

const parser = new PressReleaseParser();

console.log('================================================================================');
console.log('PRESS RELEASE VALIDATION SYSTEM TEST');
console.log('Testing quality validation with good and bad examples');
console.log('================================================================================\n');

const testFiles = [
    { file: 'porter_01_launch.txt', expected: 'excellent/good' },
    { file: 'sherrill_03_tax_returns.txt', expected: 'fair/poor' },
    { file: 'release_01.txt', expected: 'rejected' },
    { file: 'hybrid_release_01.txt', expected: 'good' },
];

testFiles.forEach(({ file, expected }) => {
    const filePath = path.join(__dirname, 'cpo_examples', file);

    if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  File not found: ${file}\n`);
        return;
    }

    const text = fs.readFileSync(filePath, 'utf8');
    const result = parser.parseWithValidation(text);
    const val = result.validation;

    console.log(`\n${'='.repeat(80)}`);
    console.log(`FILE: ${file}`);
    console.log(`Expected: ${expected}`);
    console.log(`${'='.repeat(80)}`);

    // Status indicator
    const statusIcons = {
        'excellent': '‚úÖ',
        'good': '‚úÖ',
        'fair': '‚ö†Ô∏è',
        'poor': '‚ö†Ô∏è',
        'rejected': '‚ùå'
    };

    console.log(`\n${statusIcons[val.status]} STATUS: ${val.status.toUpperCase()}`);
    console.log(`üìä Quality Score: ${val.quality_score}/100`);
    console.log(`${val.should_reject ? 'üö´ SHOULD REJECT: Yes' : '‚úÖ SHOULD REJECT: No'}`);

    // Metrics
    console.log('\nüìã METRICS:');
    console.log(`  ‚Ä¢ Quotes: ${val.metrics.quote_count}`);
    console.log(`  ‚Ä¢ Unknown speakers: ${val.metrics.unknown_speakers} (${val.metrics.unknown_speaker_percentage}%)`);
    console.log(`  ‚Ä¢ Body length: ${val.metrics.body_length} chars`);
    console.log(`  ‚Ä¢ Has dateline: ${val.metrics.has_dateline ? 'Yes' : 'No'}`);
    console.log(`  ‚Ä¢ Has headline: ${val.metrics.has_headline ? 'Yes' : 'No'}`);
    console.log(`  ‚Ä¢ Has FOR IMMEDIATE RELEASE: ${val.metrics.has_for_immediate_release ? 'Yes' : 'No'}`);

    // Errors
    if (val.errors.length > 0) {
        console.log('\n‚ùå ERRORS (Critical Issues):');
        val.errors.forEach((err, i) => {
            console.log(`  ${i + 1}. ${err.message}`);
            console.log(`     üí° ${err.suggestion}`);
        });
    }

    // Warnings
    if (val.warnings.length > 0) {
        console.log('\n‚ö†Ô∏è  WARNINGS:');
        val.warnings.forEach((warn, i) => {
            const severityIcon = {
                'high': 'üî¥',
                'medium': 'üü°',
                'low': 'üü¢'
            }[warn.severity];
            console.log(`  ${severityIcon} [${warn.severity.toUpperCase()}] ${warn.message}`);
            console.log(`     üí° ${warn.suggestion}`);
        });
    }

    // Suggestions
    if (val.suggestions.length > 0) {
        console.log('\nüí¨ OVERALL SUGGESTIONS:');
        val.suggestions.forEach(sug => {
            console.log(`  ‚Ä¢ ${sug}`);
        });
    }

    // Verdict
    console.log('\n' + '‚îÄ'.repeat(80));
    if (val.should_reject) {
        console.log('üö´ VERDICT: REJECTED - This press release cannot be processed.');
        console.log('   Please fix all critical errors and resubmit.');
    } else if (val.status === 'poor') {
        console.log('‚ö†Ô∏è  VERDICT: ACCEPTED WITH MAJOR ISSUES');
        console.log('   This release can be parsed but has significant quality problems.');
    } else if (val.status === 'fair') {
        console.log('‚ö†Ô∏è  VERDICT: ACCEPTED WITH MINOR ISSUES');
        console.log('   This release is parseable but could be improved.');
    } else {
        console.log('‚úÖ VERDICT: ACCEPTED - Good quality press release.');
    }
});

console.log('\n\n' + '='.repeat(80));
console.log('VALIDATION SYSTEM SUMMARY');
console.log('='.repeat(80));
console.log('\nThe validation system checks:');
console.log('  ‚ùå CRITICAL ERRORS (auto-reject if score < 40):');
console.log('     ‚Ä¢ Missing FOR IMMEDIATE RELEASE header (-30 points)');
console.log('     ‚Ä¢ No quotes found (-40 points)');
console.log('     ‚Ä¢ No meaningful headline (-25 points)');
console.log('     ‚Ä¢ Insufficient content < 100 chars (-35 points)');
console.log('\n  ‚ö†Ô∏è  HIGH-PRIORITY WARNINGS:');
console.log('     ‚Ä¢ Missing dateline (-15 points)');
console.log('     ‚Ä¢ >75% unknown speakers (-20 points)');
console.log('     ‚Ä¢ >50% unknown speakers (-10 points)');
console.log('\n  üü° MEDIUM WARNINGS:');
console.log('     ‚Ä¢ Only 1 quote (-5 points)');
console.log('     ‚Ä¢ Some unknown speakers (-5 points)');
console.log('     ‚Ä¢ Short content < 200 chars (-5 points)');
console.log('\nüìä QUALITY TIERS:');
console.log('     ‚Ä¢ 90-100: Excellent');
console.log('     ‚Ä¢ 75-89:  Good');
console.log('     ‚Ä¢ 60-74:  Fair');
console.log('     ‚Ä¢ 40-59:  Poor (parseable with issues)');
console.log('     ‚Ä¢ 0-39:   Rejected (too many critical errors)');
console.log('');
